{
	"info": {
		"_postman_id": "312dcded-5f24-4afd-828e-177d2dfc5308",
		"name": "Day 07: Run test suites",
		"description": "## Instructions for Day 7: Run test suites\n\n1. **Get the challenge:** Fork the parent collection to your own public workspace.\n2. **Read the documentation:** Select the first folder. Expand the context bar on the right to follow the instructions in the collection documentation.\n3. **Submit your solution:** Select the second folder and follow the instructions in the documentation to validate your solution.\n    \n\n## Learning objectives\n\n- Write tests for request, folder, or collection\n- Write dynamic tests using variables\n- Run a collection locally using the collection runner\n- Schedule a collection run on Postman Cloud\n- Schedule a collection-based monitor on Postman Cloud\n    \n\n## Concepts covered\n\n- [Write tests](https://learning.postman.com/docs/writing-scripts/test-scripts/)\n- [Collection Runner](https://learning.postman.com/docs/running-collections/intro-to-collection-runs/)\n- [Schedule collection runs](https://learning.postman.com/docs/running-collections/scheduling-collection-runs/)\n- [Schedule collection-based monitors](https://learning.postman.com/docs/monitoring-your-api/intro-monitors/#collection-based-monitors)\n    \n\n## Additional resources\n\n- [Trigger runs with webhooks](https://learning.postman.com/docs/running-collections/collection-webhooks/) docs\n- [Log Response Data in Collection Runs](https://youtu.be/UreV_7fHKiU) video\n- [Postman API Test Automation for Beginners](https://www.youtube.com/watch?v=zp5Jh2FIpF0) freeCodeCamp by Valentin Despa",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "29142931-312dcded-5f24-4afd-828e-177d2dfc5308"
	},
	"item": [
		{
			"name": "Run test suites",
			"item": [
				{
					"name": "Variables and scripts",
					"item": [
						{
							"name": "get Canadian user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c36f7a2-1cae-4475-831a-6100ae7335c2",
										"exec": [
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"let firstName = jsonData.results[0].name.first;\r",
											"let lastName = jsonData.results[0].name.last;\r",
											"let fullName = firstName + \" \" + lastName;\r",
											"pm.collectionVariables.set(\"firstuser\", fullName);\r",
											"let email = jsonData.results[0].email;\r",
											"pm.collectionVariables.set(\"email\", email);\r",
											"let uuid = jsonData.results[0].login.uuid;\r",
											"pm.collectionVariables.set(\"uuid\", uuid);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b109c1e3-de6d-4308-a860-3a17e002b846",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://randomuser.me/api?nat=CA",
									"protocol": "https",
									"host": [
										"randomuser",
										"me"
									],
									"path": [
										"api"
									],
									"query": [
										{
											"key": "nat",
											"value": "CA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "echo the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84db0172-1a2c-4aad-aed1-16921d2657b8",
										"exec": [
											"pm.test(`Returns correct email: ${pm.collectionVariables.get('email')}`, function () {\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"    let email = jsonData.email;\r",
											"\r",
											"    pm.expect(email).to.eql(pm.collectionVariables.get(\"{{email}}\"));\r",
											" //add your expectation here\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "23e1bb73-7bfd-4c3f-b826-fe28909602f0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "      {\r\n      \"name\": \"{{firstuser}}\",\r\n      \"email\": \"{{email}}\",\r\n      \"uuid\": \"{{uuid}}\"\r\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://postman-echo.com/post",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"post"
									]
								}
							},
							"response": []
						}
					],
					"id": "3b7025b6-8767-4803-a6fd-d999f5d95b16",
					"description": "Let's use the [Random User API](https://randomuser.me/) to pass data from one request to another using variables.\n\n1. **Add a request**: Add a request called `get Canadian user` to the folder `Variables and scripts` with the following details:\n    \n    - `GET` method\n        \n    - `https://randomuser.me/api` request URL\n        \n    - Query parameter called `nat` with the value `CA`  \n        Send the request to make sure you receive a successful response.\n        \n2. **Add another request**: Add a second request called `echo the user` after the first one with the following details:\n    \n    - `POST` method\n        \n    - `https://postman-echo.com/post` request URL\n        \n    - JSON request body formatted like this:\n        \n        ``` json\n            {\n            \"name\": \"Dawn Ellis\",\n            \"email\": \"dawn.ellis@example.com\",\n            \"uuid\": \"334eecea-607d-4111-90ee-e57bea971654\"\n            }\n        \n         ```\n        \n3. **Set variables**: Under the **Scripts > Post-response** tab of the `get Canadian user` request, initialize **collection variables** to store the data returned from the API for the first user in the response object. This information is required for the next request.\n    \n4. **Get variables**: Under the **Body** tab in the `echo the user` request, use the variables from the previous step. The request body should no longer be hard coded, and instead, should reference the variables you just created. Step through the workflow by running each request one at a time to ensure you are setting and getting the variables properly.\n    \n5. **Run the folder**: Once you think you have it, run this folder using the [runner](https://learning.postman.com/docs/running-collections/intro-to-collection-runs/) to make sure there are no errors.\n    \n\nOnce you complete these steps, move on to the next folder in this collection to submit your solution. Follow the instructions in the request documentation.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8772f120-46ed-4cd5-9dee-58fa5a83f467",
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "83f72ed9-913d-4698-8db9-d04daab5da02",
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								]
							}
						}
					]
				}
			],
			"id": "3713b48a-ea00-4f01-be6c-ba930f65550a",
			"description": "Let's continue using the [Random User API](https://randomuser.me/) to learn how to run a collection or folder in Postman.\n\n1.  **Add a folder**: Find the completed challenge from `Day 05: Variables and scripts`, and duplicate the folder called `Variables and scripts`. Drag that folder into this folder `Run test suites`.\n1. **Add test to the folder**: Select the new folder `Variables and scripts`, and [add a test](https://learning.postman.com/docs/writing-scripts/test-scripts/#adding-tests) to the folder so that it runs after every request within the folder. This test should ensure a successful HTTP status code. Make sure the test is added to the folder, and not each of the two requests.\n1. **Add a dynamic test**: Add a test to the second request to verify that you have the correct email address. The expectation statement needs to both parse the response data and compare it to your collection variable. Using a variable in the test name provides more visibility for debugging. Feel free to add more tests.\n```javascript\npm.test(`Returns correct email: ${pm.collectionVariables.get('email')}`, function () {\n    //add your expectation here\n})\n```\n1.  **Run the folder**: Now that you have two requests with some tests, run the folder `Run test suites` using [the collection runner](https://learning.postman.com/docs/running-collections/intro-to-collection-runs/) to make sure your tests pass. Take a minute to review the configuration options, the results, and run summary.\n1. **Schedule a collection run (optional)**: You can schedule a collection to run on Postman cloud. To try it out, fork your collection to a personal, private, or team workspace and [schedule a run](https://learning.postman.com/docs/running-collections/scheduling-collection-runs/) according to a specified frequency. You can return to edit the configuration details or review the results.\n1. **Schedule a monitor (optional)**: You can also [schedule a collection-based monitor](https://learning.postman.com/docs/monitoring-your-api/intro-monitors/#collection-based-monitors) for when you want to set up alerts like triggering on-call upon failure.\n\nIn upcoming challenges, we'll learn other ways to run test suites.\n\nOnce you complete these steps, move on to the next folder in this collection to submit your solution. Follow the instructions in the request documentation."
		},
		{
			"name": "Submit your solution",
			"item": [
				{
					"name": "submit collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f56c179-c018-446e-8f33-7f5fd03f9e75",
								"exec": [
									"// counter for passed tests",
									"let pass = 0",
									"let totalToPass = 8",
									"",
									"let collection = pm.response.json().collection",
									"",
									"pm.test(\"If you have any failures, review the failed test results or ask for support in the community forum. Remember to save your changes if you update the collection. When all of your tests pass, you are done with today's challenge.\", () => {",
									"    pm.expect(true);",
									"    pass += 1",
									"});",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"    pass += 1",
									"});",
									"",
									"pm.test(\"Correct collection returned\", () => {",
									"    pm.expect(collection.info.name).equals(\"Day 07: Run test suites\")",
									"    pass += 1",
									"})",
									"",
									"let parentFolder = collection.item.find(fol => {return fol.name === \"Run test suites\"})",
									"let folder = parentFolder.item.find(fol => {return fol.name === \"Variables and scripts\" || fol.name == \"Variables and scripts Copy\"})",
									"",
									"pm.test(\"Requests added correctly\", () => {",
									"    pm.expect(folder.item.length, 'check number of requests').equals(2)",
									"",
									"    let canadianRequest = folder.item.find(req => { return req.name === \"get Canadian user\"})",
									"    pm.expect(canadianRequest.name, 'check name').equals(\"get Canadian user\")",
									"    pm.expect(canadianRequest.request.method, 'check method').equals(\"GET\")",
									"    pm.expect(canadianRequest.request.url.query.length, 'check params').equals(1)",
									"    pm.expect(canadianRequest.request.url.query[0].key, 'check param key').equals(\"nat\")",
									"    pm.expect(canadianRequest.request.url.query[0].value, 'check param value').equals(\"CA\")",
									"",
									"    let echoRequest = folder.item.find(req => { return req.name === \"echo the user\"})",
									"    pm.expect(echoRequest.name, 'check name').equals(\"echo the user\")",
									"    pm.expect(echoRequest.request.method, 'check method').equals(\"POST\")",
									"",
									"    pass += 1",
									"})",
									"",
									"pm.test(\"Collection variables set\", () => {",
									"    let canadianRequest = folder.item.find(req => { return req.name === \"get Canadian user\"})",
									"    let canadianTest = canadianRequest.event.find(event => { return event.listen === \"test\" })",
									"    pm.expect(canadianTest.listen).equals(\"test\")",
									"    pm.expect(canadianTest.script.exec.toString(), 'check collection variables set').contains(\"pm.collectionVariables.set\")",
									"    pm.expect(canadianTest.script.exec.toString(), 'check parsed name').contains(\"name\")",
									"    pm.expect(canadianTest.script.exec.toString(), 'check parsed email').contains(\"email\")",
									"    pm.expect(canadianTest.script.exec.toString(), 'check parsed uuid').contains(\"uuid\")",
									"",
									"    pass += 1",
									"})",
									"",
									"pm.test(\"Echo body added\", () => {",
									"    let echoRequest = folder.item.find(req => { return req.name === \"echo the user\"})",
									"",
									"    pm.expect(echoRequest.request.body.mode, 'check mode').equals(\"raw\")",
									"    pm.expect(echoRequest.request.body.options.raw.language, 'check language').equals(\"json\")",
									"    pm.expect(echoRequest.request.body.raw, 'check body not hardcoded').does.not.contain(\"dawn.ellis@example.com\")",
									"",
									"    pass += 1",
									"})",
									"",
									"pm.test(\"Folder-level test added\", function() {",
									"    let event = folder.event.find(e => {return e.listen === \"test\"})",
									"    pm.expect(event.script.exec.toString()).contains('200')",
									"    pass += 1",
									"})",
									"",
									"pm.test(\"Echo test added\", () => {",
									"    let echoRequest = folder.item.find(req => { return req.name === \"echo the user\"})",
									"    let event = echoRequest.event.find(e => {return e.listen === \"test\"})",
									"",
									"    pm.expect(event.script.exec.toString(), 'check parse object')",
									"    pass += 1",
									"})",
									"",
									"// visualization for test results",
									"let template",
									"if (pass == totalToPass) {",
									"    template = `🍪 passing!",
									"        <br />",
									"        <img src=\"https://media0.giphy.com/media/Q343jgPdGDu251pGvI/giphy.gif?cid=ecf05e47wmgub9asxncr6ignkagrk1bcnygb3okl9ieny0wt&rid=giphy.gif&ct=g\" />",
									"    `",
									"} else {",
									"    template = `🙅 please try again",
									"        <br />",
									"        <img src=\"https://media1.giphy.com/media/QzSNkvOoLJ6wpA6Uoz/giphy.gif?cid=ecf05e47jshcqa6t00492fd5dl708fh3xcwuxmews3wxsjtr&rid=giphy.gif&ct=g\" />",
									"    `",
									"}",
									"pm.visualizer.set(template)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "64fd1e1a-2af9-4955-9675-3ee280ea321e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{vault:postman_api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.getpostman.com/collections/29142931-f809ba5e-6b47-4682-8ef6-0a2327a7fbbf",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								"29142931-f809ba5e-6b47-4682-8ef6-0a2327a7fbbf"
							]
						},
						"description": "It's time to check your collection.\n\n1. **Get the collection ID:** Select the collection in the sidebar. Then in the context bar to the right, select the `Info` icon and copy the collection `ID`.\n    \n2. **Update the request URL:** Update the `collection_uid` in the request URL with the collection `ID` from the previous step, using any method you prefer.\n    \n3. **Get your Postman API Key**: Create a new [Postman API Key](https://go.postman.co/settings/me/api-keys) and then open _Postman Vault_ (Accessed via the bottom right menu bar). Create a new _Postman Vault_ variable called `postman_api_key` and add your Postman API Key as the Value.  \n    Once the changes are saved, Postman will use the _Postman Vault_ variable to authorize your request as shown under the **Headers** tab of the request.\n    \n4. **Validate your solution**: Hit **Send** and look under the **Test Results** tab of the server response at the bottom to review your test results.\n    \n\nIf you have any failures, review the failed test results or ask for support in the [community forum](https://community.postman.com/c/training/38). When all of your tests pass, you are done with today's challenge."
					},
					"response": []
				}
			],
			"id": "459533d5-5dd6-47d3-8f9f-bc57aaf1c6c1",
			"description": "Follow the instructions in the request documentation."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "23be6cc3-54d2-41a8-ba5b-d7b0934c5d19",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "33bf814f-634e-4a06-8f4a-355dbe7cb485",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "841b9a09-c18b-483c-ab28-2e6c82ecc9d3",
			"key": "firstuser",
			"value": ""
		},
		{
			"id": "1f5ca880-c28c-4f9e-91a2-41579775fdab",
			"key": "email",
			"value": ""
		},
		{
			"id": "88be7ba6-761f-4e43-8c31-58c639ef4852",
			"key": "uuid",
			"value": ""
		}
	]
}