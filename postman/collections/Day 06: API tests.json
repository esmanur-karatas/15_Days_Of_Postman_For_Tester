{
	"info": {
		"_postman_id": "9588a16d-fb1b-4906-aa8d-33025a0b5c31",
		"name": "Day 06: API tests",
		"description": "## Instructions for Day 6: API tests\n\n1.  **Get the challenge:** Fork the parent collection to your own public workspace.\n2.  **Read the documentation:** Select the first folder. Expand the context bar on the right to follow the instructions in the collection documentation.\n3.  **Submit your solution:** Select the second folder and follow the instructions in the documentation to validate your solution.\n    \n## Learning objectives\n- Parse a response object\n- Insert a test via snippet\n- Write a custom Postman test\n- Use API calls to replicate a user scenario\n- Add multiple assertions to a test\n- Explain how Chai.js BDD syntax is used in Postman\n\n## Concepts covered\n\n*   [Writing tests](https://learning.postman.com/docs/writing-scripts/test-scripts/)\n*   [Test snippets](https://learning.postman.com/docs/writing-scripts/test-scripts/#using-snippets)\n*  [Collection Runner](https://learning.postman.com/docs/running-collections/intro-to-collection-runs/)\n* [Postman sandbox](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/) docs\n\n## Additional resources\n\n* [Review Test Results in Postman](https://youtu.be/S3GKLTVRtmE) video\n*   [Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/) in the docs\n*   [Intro to writing tests - with examples](https://www.postman.com/postman/workspace/postman-team-collections/collection/1559645-13bd44c4-94ec-420a-8390-8ff44b60f14d?ctx=documentation) sample collection\n*   [Chai.js](https://www.chaijs.com/) docs\n* [Continuous Quality](https://youtu.be/zrmQAgixMpU) webinar video\n* [Continuous Testing](https://youtu.be/sB2HHrezQOo) webinar video",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "29142931-9588a16d-fb1b-4906-aa8d-33025a0b5c31"
	},
	"item": [
		{
			"name": "API tests",
			"item": [
				{
					"name": "New user workflow",
					"item": [
						{
							"name": "User Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83f256ba-5a56-4ecf-b29d-acfd98783e52",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"let session_token = jsonData.response.session_token;\r",
											"pm.collectionVariables.set(\"token\", session_token);\r",
											"\r",
											"let user_id = jsonData.response.user_id;\r",
											"pm.collectionVariables.set(\"user_id\", user_id);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "16c8cdae-3dbc-4773-b095-b5f6972f3838",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"esmanukaratas\",\r\n    \"password\" : \"esmanur123\"\r\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8dc8d5a-5751-439b-a368-277fdb450003",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"      let res = pm.response.json()\r",
											"      pm.test(\"Response object is as expected\", function () {\r",
											"      pm.expect(res.response).to.be.an('object')\r",
											"      pm.expect(res.response.balance).to.be.a('number')\r",
											"      pm.expect(res.status).to.be.eql('OK');\r",
											"      pm.expect(res.response.user_id).equals(pm.collectionVariables.get('user_id'))\r",
											"      pm.response.to.have.header(\"Content-Type\");\r",
											"      })"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "617dfbc4-8850-4e3a-a1d9-ba729afda18c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/account/{{user_id}}/summary",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"account",
										"{{user_id}}",
										"summary"
									]
								},
								"description": "Fetch account summary for a single user."
							},
							"response": []
						},
						{
							"name": "User Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95585c1c-1acb-4923-b070-65a11557460c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4da0cce5-8565-4554-833b-939102bf45b4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"logout"
									]
								},
								"description": "This API revokes an active user session."
							},
							"response": []
						},
						{
							"name": "Account summary 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2774bb4d-c2af-465b-973e-bf94dda6b5fd",
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c68efef4-aff6-44ca-bcec-03f39124bd62",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/account/{{user_id}}/summary",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"account",
										"{{user_id}}",
										"summary"
									]
								},
								"description": "Fetch account summary for a single user."
							},
							"response": []
						}
					],
					"id": "7632e6bd-70b0-4ab2-b116-ba2c702ad7f3",
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "value",
								"value": "{{token}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "x-api-key",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dd946211-f2af-4ef5-8379-3d8c74fa54ae",
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f13be5fd-5bc8-4bc0-9d84-5bfe498ccbad",
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Setup",
					"item": [
						{
							"name": "Create User Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2455c330-f82a-423a-9dea-574a94287175",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"let user_id = jsonData.response.user_id;\r",
											"pm.collectionVariables.set(\"user_id\", user_id);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9823344c-ca11-402b-b47b-07011b8b4c2e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"esmagnukaratas\",\r\n    \"password\" : \"esmanur123\"\r\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								},
								"description": "Register a new user with The Good Bank. The username must be unique."
							},
							"response": []
						}
					],
					"id": "9553d1b4-a5b9-4851-bdd9-432556a6c927"
				}
			],
			"id": "84d50d9d-f19c-4b01-8325-8f694420893f",
			"description": "1. **Create an API and a collection**: Import [this API specification](https://raw.githubusercontent.com/kmmanoj96/vulnerable-apis/main/openAPISpecBank.yaml), and generate a collection from the specification.\n    \n    1. Ensure that you select the `OpenAPI 3.0 and Postman Collection` option during this step to also _**Import**_ the **API** and not just the **Collection**.\n        \n    2. Once this step is completed, make sure you have an API in the **APIs** sidebar and a Collection in the **Collections** sidebar, both called `The Good Bank APIs`.\n        \n2. **Add folders**: Add two new folders called `Setup` and `New user workflow` nested under the `API tests` folder.\n    \n3. **Add URL**: Find the `baseUrl` used in the `Good Bank API` collection, and add it as a collection variable called `baseUrl` to the `Day 06: API tests` collection.\n    \n4. **Set up a new user**: Find the following request in the `The Good Bank APIs` collection, and duplicate it over to the `Setup` folder.\n    \n    - `POST` Create User Under the **Body** tab, update the username and password of your new user. Make a note of this information using any method you prefer. Hit **Send** to create a new user. The response will contain a `user_id`. Create a collection variable called `user_id` with this information, using any method you prefer.\n        \n5. **Add a scenario**: Find the following requests in the `The Good Bank APIs` collection, and duplicate them over to the `New user workflow` folder.\n    \n    - `POST` User Login\n        \n    - `GET` Account summary\n        \n    - `GET` User Logout\n        \n    - `GET` Account summary 2 (A duplicate of the Account summary request)\n        \n        - Find the `User Login` request, and update the request body with the `username` and `password` of the new user you created in the previous step.\n            \n        - Add a Postman test to verify a successful response (you may need to send the request first).\n            \n        - Add some code under the **Scripts > Post-response** tab to set the `user_id` as Collection Variable to store the logged in user's id.\n            \n        - Copy the users `session_token` value from the response body and store this value as a variable in the _Postman Vault_, with the variable name of `token`.\n            \n        - Send the request again to verify the `user_id` variable is set correctly.\n            \n6. **Add authorization**: Set an `API Key` authorization type for the `New user workflow` folder. This particular API requires that a token be submitted as a _Request Header_ called `x-api-key`. Set the _Key_ to `x-api-key` and the _Value_ to `{{vault:token}}`. Each request within the `New user workflow` folder should inherit authorization from the folder.\n    \n7. **Continue the scenario**: [Add at least one test](https://learning.postman.com/docs/writing-scripts/test-scripts/) to each request within the `New user workflow` folder to verify a successful response.\n    \n    - `POST` User Login\n        \n    - `GET` Account summary\n        \n        - Update the path parameter to utilize your new `user_id` variable.\n            \n    - `GET` User Logout\n        \n    - `GET` Account summary 2\n        \n        - Update your test of a successful response to verify a `403` HTTP status code, since after the user logs out, they should not be able to access their account summary.\n            \n8. **Multiple assertions**: Add the following code to the first `Account summary` request. This parses the response object, and lists three expectations about the response object within a single test.\n    \n    ``` javascript\n         let res = pm.response.json()\n         pm.test(\"Response object is as expected\", function () {\n         pm.expect(res.response).to.be.an('object')\n         pm.expect(res.response.balance).to.be.a('number')\n         pm.expect(res.response.user_id).equals(pm.collectionVariables.get('user_id'))\n         })\n    \n     ```\n    \n    Review the [Chai.js documentation](https://www.chaijs.com/api/bdd/) and [these test examples](https://www.postman.com/postman/workspace/test-examples-in-postman/collection/1559645-820d771d-70ab-452f-9edd-0904dbc315b8?ctx=documentation). Add at least three more expectations within this test, such as the object's properties, values, or data types.\n    \n9. **Run the folder (Optional)**: _Due to the way that Postman Vault Variables are created, this step will fail if you have do not manually set a valid token._ Use the runner to execute all the requests in the folder `New user workflow`. Make sure all your tests pass, and save your changes.\n    \n\nIn upcoming challenges, we'll learn more about [testing for collections and folders](https://learning.postman.com/docs/writing-scripts/test-scripts/#testing-collections-and-folders), automating tests, and more advanced scripts.\n\nOnce you complete these steps, move on to the next folder in this collection to submit your solution. Follow the instructions in the request documentation."
		},
		{
			"name": "Submit your solution",
			"item": [
				{
					"name": "submit collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd28f067-3b8d-4067-bf97-e37d373a012e",
								"exec": [
									"// counter for passed tests",
									"let pass = 0",
									"let totalToPass = 7",
									"",
									"let collection = pm.response.json().collection",
									"",
									"pm.test(\"If you have any failures, review the failed test results or ask for support in the community forum. Remember to save your changes if you update the collection. When all of your tests pass, you are done with today's challenge.\", () => {",
									"    pm.expect(true);",
									"    pass += 1",
									"});",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"    pass += 1",
									"});",
									"",
									"pm.test(\"Correct collection returned\", () => {",
									"    pm.expect(collection.info.name).equals(\"Day 06: API tests\")",
									"    pass += 1",
									"})",
									"",
									"let scenarioFolder = collection.item.find(fol => {return fol.name === \"API tests\"})",
									"",
									"pm.test(\"Folders added correctly\", () => {",
									"    pm.expect(collection.item.length, 'check number of folders').equals(2)",
									"",
									"    let setupFolder = scenarioFolder.item.find(fol => { return fol.name === \"Setup\"})",
									"    pm.expect(setupFolder.item.length, 'check requests in first folder').equals(1)",
									"",
									"    let newFlowFolder = scenarioFolder.item.find(fol => { return fol.name === \"New user workflow\" })",
									"    pm.expect(newFlowFolder.item.length, 'check requests in second folder').equals(4)",
									"",
									"    pass += 1",
									"})",
									"",
									"pm.test(\"Authorization added correctly\", () => {",
									"    let newFlowFolder = scenarioFolder.item.find(fol => { return fol.name === \"New user workflow\" })",
									"    pm.expect(newFlowFolder.auth.type).equals(\"apikey\")",
									"    ",
									"    let value = newFlowFolder.auth.apikey.find(item => { return item.key === \"value\" })",
									"    pm.expect(value.value).equals(\"{{token}}\")",
									"",
									"    pass += 1",
									"})",
									"",
									"pm.test(\"Variables added correctly\", () => {",
									"",
									"    let baseVar = collection.variable.find(variable => { return variable.key === 'baseUrl'})",
									"    pm.expect(baseVar.key, 'check base URL variable set').to.equal('baseUrl')",
									"    pm.expect(baseVar.value, 'check base URL').to.equal('http://security.postman-breakable.com')",
									"",
									"    let idVar = collection.variable.find(variable => { return variable.key === 'user_id'})",
									"    pm.expect(idVar.key, 'check id variable set').to.equal('user_id')",
									"    ",
									"    pass += 1",
									"})",
									"",
									"pm.test(\"Tests added correctly\", () => {",
									"    let newFlowFolder = scenarioFolder.item.find(fol => { return fol.name === \"New user workflow\" })",
									"",
									"    let firstRequest = newFlowFolder.item.find(req => { return req.name === \"User Login\" | req.name === \"User Login Copy\"})",
									"    let firstTest = firstRequest.event.find(event => {return event.listen === \"test\"})",
									"    pm.expect(firstTest.script.exec.toString(), 'check first test').to.include(\"pm.test\")",
									"",
									"    let secondRequest = newFlowFolder.item.find(req => { return req.name === \"Account summary\" | req.name === \"Account summary Copy\"})",
									"    let secondTest = secondRequest.event.find(event => {return event.listen === \"test\"})",
									"    pm.expect(secondTest.script.exec.toString(), 'check second test').to.include(\"pm.test\")",
									"",
									"    let thirdRequest = newFlowFolder.item.find(req => { return req.name === \"User Logout\" | req.name === \"User Logout Copy\"})",
									"    let thirdTest = thirdRequest.event.find(event => {return event.listen === \"test\"})",
									"    pm.expect(thirdTest.script.exec.toString(), 'check third test').to.include(\"pm.test\")",
									"",
									"    let fourthRequest = newFlowFolder.item.find(req => { return req.name === \"Account summary 2\"})",
									"    let fourthTest = fourthRequest.event.find(event => {return event.listen === \"test\"})",
									"    pm.expect(fourthTest.script.exec.toString(), 'check fourth test').to.include(\"pm.test\")",
									"    pm.expect(fourthTest.script.exec.toString(), 'check 403').to.include(\"403\")",
									"",
									"    pass += 1",
									"})",
									"",
									"",
									"// visualization for test results",
									"let template",
									"if (pass == totalToPass) {",
									"    template = `🍪 passing!",
									"        <br />",
									"        <img src=\"https://media2.giphy.com/media/n5CHDD8c4sW18Dqz3z/giphy.gif?cid=ecf05e47i4rx73acqxzs4eqcbe2xnv7bczqajkpes126r4js&rid=giphy.gif&ct=g\" />",
									"    `",
									"} else {",
									"    template = `🙅 please try again",
									"        <br />",
									"        <img src=\"https://media2.giphy.com/media/mcHOSTJMjCrjW/giphy.gif?cid=ecf05e47wkv0fanzcddo3yh13fqy4qcj26wvuwsr1y3tuext&rid=giphy.gif&ct=g\" />",
									"    `",
									"}",
									"pm.visualizer.set(template)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cd5e3232-74a3-44c7-aa26-416097d0274c",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "336f7cd7-c430-42aa-935a-65cbab44ce25",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{vault:postman_api_key}}"
							}
						],
						"url": {
							"raw": "https://api.getpostman.com/collections/29142931-dd527d5e-730c-4cac-8685-1d78e7d65165",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								"29142931-dd527d5e-730c-4cac-8685-1d78e7d65165"
							]
						},
						"description": "It's time to check your collection.\n\n1. **Get the collection ID:** Select the collection in the sidebar. Then in the context bar to the right, select the `Info` icon and copy the collection `ID`.\n    \n2. **Update the request URL:** Update the `collection_uid` in the request URL with the collection `ID` from the previous step, using any method you prefer.\n    \n3. **Get your Postman API Key**: Create a new [Postman API Key](https://go.postman.co/settings/me/api-keys) and then open _Postman Vault_ (Accessed via the bottom right menu bar). Create a new _Postman Vault_ variable called `postman_api_key` and add your Postman API Key as the Value.  \n    Once the changes are saved, Postman will use the _Postman Vault_ variable to authorize your request as shown under the **Headers** tab of the request.\n    \n4. **Validate your solution**: Hit **Send** and look under the **Test Results** tab of the server response at the bottom to review your test results.\n    \n\nIf you have any failures, review the failed test results or ask for support in the [community forum](https://community.postman.com/c/training/38). When all of your tests pass, you are done with today's challenge."
					},
					"response": []
				},
				{
					"name": "submit api",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8aa8ff5c-0db9-46c6-840f-b9838c366a4e",
								"exec": [
									"// counter for passed tests",
									"let pass = 0",
									"let totalToPass = 3",
									"",
									"let api = pm.response.json().api",
									"",
									"pm.test(\"If you have any failures, review the failed test results or ask for support in the Postman Community Forum. Remember to save your changes if you update the collection. When all of your tests pass, you are done with today's challenge.\", () => {",
									"    pm.expect(true);",
									"    pass += 1",
									"});",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"    pass += 1",
									"});",
									"",
									"pm.test(\"Correct API returned\", () => {",
									"    pm.expect(api.name, 'check the API Name is correct').equals(\"The Good Bank APIs\")",
									"    pass += 1",
									"})",
									"",
									"// visualization for test results",
									"let template",
									"if (pass == totalToPass) {",
									"    template = `🍪 passing!",
									"        <br />",
									"        <img src=\"https://media2.giphy.com/media/n5CHDD8c4sW18Dqz3z/giphy.gif?cid=ecf05e47i4rx73acqxzs4eqcbe2xnv7bczqajkpes126r4js&rid=giphy.gif&ct=g\" />",
									"    `",
									"} else {",
									"    template = `🙅 please try again",
									"        <br />",
									"        <img src=\"https://media2.giphy.com/media/mcHOSTJMjCrjW/giphy.gif?cid=ecf05e47wkv0fanzcddo3yh13fqy4qcj26wvuwsr1y3tuext&rid=giphy.gif&ct=g\" />",
									"    `",
									"}",
									"pm.visualizer.set(template)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f9707cf6-872b-4837-bae0-a5bee94c4eb9",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c7e422b3-ae79-462d-bf40-4575b5c68b94",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{vault:postman_api_key}}"
							}
						],
						"url": {
							"raw": "https://api.getpostman.com/apis/3821ea0f-0290-4ebc-b3b3-d239a641b99a",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis",
								"3821ea0f-0290-4ebc-b3b3-d239a641b99a"
							]
						},
						"description": "It's time to check your API.\n\n1. **Get the API ID:** Select the API in the sidebar (This is hidden by default and go be make visable in the Workspace settings). Then in the context bar to the right, select the `Info` icon and copy the API `ID`.\n    \n2. **Update the request URL:** Update the `api_id` in the request URL with the API `ID` from the previous step, using any method you prefer.\n    \n3. **Get your Postman API Key**: Create a new [Postman API Key](https://go.postman.co/settings/me/api-keys) and then open _Postman Vault_ (Accessed via the bottom right menu bar). Create a new _Postman Vault_ variable called `postman_api_key` and add your Postman API Key as the Value.  \n    Once the changes are saved, Postman will use the _Postman Vault_ variable to authorize your request as shown under the **Headers** tab of the request.\n    \n4. **Validate your solution**: Hit **Send** and look under the **Test Results** tab of the server response at the bottom to review your test results.\n    \n\nIf you have any failures, review the failed test results or ask for support in the [community forum](https://community.postman.com/c/training/38). When all of your tests pass, you are done with today's challenge."
					},
					"response": []
				}
			],
			"id": "d1907ff4-9b95-4c32-8f8e-85fcbb113242",
			"description": "Follow the instructions in the request documentation."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "06c1bd88-c009-4c09-b05f-4214545a33a2",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "e3258112-decc-4010-9f33-dbdd28426068",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "dec6bc50-11b9-40d0-8fc8-781b4ae117cd",
			"key": "user_id",
			"value": ""
		},
		{
			"id": "bd53c3b0-a367-42af-bc28-a120d21e783a",
			"key": "token",
			"value": ""
		},
		{
			"id": "b5a5ba8b-46f4-46c3-953d-6691653a1eea",
			"key": "baseUrl",
			"value": "http://security.postman-breakable.com",
			"type": "default"
		}
	]
}