{
	"info": {
		"_postman_id": "c1ed4471-1569-4e56-a2d9-ca38ff06e7f6",
		"name": "Day 12: Use libraries",
		"description": "## Instructions for Day 12: Use libraries\n\n1.  **Get the challenge:** Fork the parent collection to your own public workspace.\n2.  **Read the documentation:** Select the first folder. Expand the context bar on the right to follow the instructions in the collection documentation.\n3.  **Submit your solution:** Select the second folder and follow the instructions in the documentation to validate your solution.\n    \n## Learning objectives\n- Use built-in libraries\n- Visualize response data using Handlebars.js\n- Define and reference external libraries\n- Reuse test scripts and requests\n- Send asynchronous HTTP requests from scripts\n\n## Concepts covered\n* [Visualizing responses](https://learning.postman.com/docs/sending-requests/visualizer/)\n* [Use external libraries](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#using-external-libraries)\n* [Send HTTP request from scripts](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#sending-http-request-from-scripts)\n\n## Additional resources\n- [Handlebars.js](https://handlebarsjs.com/) docs\n- [Add external libraries](https://www.postman.com/postman/workspace/postman-answers/collection/13455110-7a6c90f0-0062-4089-b206-27c803dc1c37?ctx=documentation) code samples\n- [Reuse test script](https://www.postman.com/postman/workspace/test-examples-in-postman/collection/1559645-e86aead2-0cb9-4144-b568-46d84251af9b?ctx=documentation) code samples",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "29142931-c1ed4471-1569-4e56-a2d9-ca38ff06e7f6"
	},
	"item": [
		{
			"name": "Use libraries",
			"item": [
				{
					"name": "get all movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "92a91c65-5cea-4eb3-bd84-ccb7418f7d23",
								"exec": [
									"  var template = `\r",
									"  <h3 class='preserveHtml' class='preserveHtml' class=&#x27;preserveHtml&#x27; class=&#x27;preserveHtml&#x27; background=\"#00FFEF\">Postman Movie Library</h3>\r",
									"  {{#each films}}\r",
									"  üé¨ <strong class='preserveHtml' class='preserveHtml' class=&#x27;preserveHtml&#x27; class=&#x27;preserveHtml&#x27; class=&#x27;preserveHtml&#x27;>{{title}}</strong> ({{year}}) - {{minutes}}mins. <i class='preserveHtml' class='preserveHtml' class=&#x27;preserveHtml&#x27; class=&#x27;preserveHtml&#x27; class=&#x27;preserveHtml&#x27;>Director: {{director}} </i>\r",
									"  {{#if stock}}[Stock: {{stock}}]{{else}}<font color=red>‚ö†Ô∏è Out of stock</font>{{/if}}\r",
									"  <br/>\r",
									"  {{/each}}\r",
									"  `;\r",
									"  // Set visualizer\r",
									"  pm.visualizer.set(template, {\r",
									"   films: pm.response.json()\r",
									"  });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "479a1a80-0f19-4d88-836a-2807b6d6b99c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://www.unbreakableapi.com/api/movies/all",
							"protocol": "https",
							"host": [
								"www",
								"unbreakableapi",
								"com"
							],
							"path": [
								"api",
								"movies",
								"all"
							]
						}
					},
					"response": []
				}
			],
			"id": "ccd6d61c-03d9-4045-9045-cc6c3472648c",
			"description": "We have already used built-in libraries like Faker.js and Chai.js. Let's use more libraries and get artistic!\n\n1. **Add a request**: Add a request called `get all movies` to the folder `Use libraries` with the following details:\n    \n    - `GET` method\n        \n    - `https://www.unbreakableapi.com/api/movies/all` request URL\n        \n\n```\n**Send** the request, and inspect the response.\n\n ```\n\n1. **Visualize the data**: Under the **Scripts > Post-response** tab, use the [<code>pm.visualizer.set()</code> method](https://learning.postman.com/docs/sending-requests/visualizer/#visualizer-api) to initialize an HTML template string and pass in the response data.\n    \n    ``` javascript\n     var template = `\n     <h3 class=&#x27;preserveHtml&#x27; class=&#x27;preserveHtml&#x27; background=\"#00FFEF\">Postman Movie Library</h3>\n     {{#each films}}\n     üé¨ <strong class=&#x27;preserveHtml&#x27; class=&#x27;preserveHtml&#x27; class=&#x27;preserveHtml&#x27;>{{title}}</b> ({{year}}) - {{minutes}}mins. <i class=&#x27;preserveHtml&#x27; class=&#x27;preserveHtml&#x27; class=&#x27;preserveHtml&#x27;>Director: {{director}} </i>\n     {{#if stock}}[Stock: {{stock}}]{{else}}<font color=red>‚ö†Ô∏è Out of stock</font>{{/if}}\n     <br/>\n     {{/each}}\n     `;\n     // Set visualizer\n     pm.visualizer.set(template, {\n      films: pm.response.json()\n     });\n    \n     ```\n    \n    **Send** the request and inspect the response under the **Visualize** tab. The template is formatted using [Handlebars.js](https://handlebarsjs.com/) syntax.\n    \n2. **Style the data**: Use [any method of styling](https://learning.postman.com/docs/sending-requests/visualizer/#adding-styling-and-interaction-to-visualizations) you prefer. Please also make the \"Out of stock\" text precisely this color: `#ff69b4`. You can add any other personal flair that you'd like. Make sure the request returns a successful response, and save your changes.\n    \n\nIn addition to built-in libraries, you can [import external libraries in the visualization](https://learning.postman.com/docs/sending-requests/visualizer/#using-your-own-libraries) using a tag. And you can also use other libraries throughout the [Postman sandbox](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#using-external-libraries) under the pre-request or test script sections.\n\n### Reuse requests and scripts across collections\n\nThere are several ways to use external libraries in Postman. In a similar manner, you can reuse requests across collections by making an extra API call to fetch that request or script. Review these examples of [Reusing a request](https://www.postman.com/postman/workspace/test-examples-in-postman/collection/1559645-e86aead2-0cb9-4144-b568-46d84251af9b) and scripts.\n\nThis method relies on the [<code class=\"'preserveHtml'\">pm.sendRequest()</code>](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#sending-http-request-from-scripts) function to send an API request from a script. Check out the [gist](https://gist.github.com/prashantagarwal/f278b3ca78b3927cde06f68674b82cae).\n\nOnce you complete these steps, move on to the next folder in this collection to submit your solution. Follow the instructions in the request documentation."
		},
		{
			"name": "Submit your solution",
			"item": [
				{
					"name": "submit collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6a0513d-e5e2-418b-9eeb-765c0c94367d",
								"exec": [
									"// counter for passed tests",
									"let pass = 0",
									"let totalToPass = 5",
									"",
									"let collection = pm.response.json().collection",
									"",
									"pm.test(\"If you have any failures, review the failed test results or ask for support in the community forum. Remember to save your changes if you update the collection. When all of your tests pass, you are done with today's challenge.\", () => {",
									"    pm.expect(true);",
									"    pass += 1",
									"});",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"    pass += 1",
									"});",
									"",
									"pm.test(\"Correct collection returned\", () => {",
									"    pm.expect(collection.info.name).equals(\"Day 12: Use libraries\")",
									"    pass += 1",
									"})",
									"",
									"let folder = collection.item.find(fol => {return fol.name === \"Use libraries\"})",
									"",
									"pm.test(\"Requests added correctly\", () => {",
									"    pm.expect(folder.item.length, 'check number of requests').equals(1)",
									"",
									"    let movieRequest = folder.item.find(req => { return req.name === \"get all movies\"})",
									"    pm.expect(movieRequest.name, 'check name').equals(\"get all movies\")",
									"    pm.expect(movieRequest.request.method, 'check method').equals(\"GET\")",
									"    pm.expect(movieRequest.request.url.raw, 'check url').equals(\"https://www.unbreakableapi.com/api/movies/all\")",
									"",
									"    pass += 1",
									"})",
									"",
									"",
									"pm.test(\"Visualizer added\", () => {",
									"    let movieRequest = folder.item.find(req => { return req.name === \"get all movies\"})",
									"    let event = movieRequest.event.find(e => {return e.listen === \"test\"})",
									"",
									"    let script = event.script.exec.toString()",
									"    pm.expect(script, 'check parse').contains(\"pm.response.json\")",
									"    pm.expect(script, 'check test').contains(\"#ff69b4\")",
									"    pm.expect(script, 'check schema').contains(\"pm.visualizer.set\")",
									"",
									"    pass += 1",
									"})",
									"",
									"// visualization for test results",
									"let template",
									"if (pass == totalToPass) {",
									"    template = `üç™ passing!",
									"        <br />",
									"        <img src=\"https://media2.giphy.com/media/4Zo41lhzKt6iZ8xff9/giphy.gif?cid=ecf05e47nd1ra6bkpjoaonuce6l676ejjxx9wsrcs39xjqw9&rid=giphy.gif&ct=g\" />",
									"    `",
									"} else {",
									"    template = `üôÖ please try again",
									"        <br />",
									"        <img src=\"https://media3.giphy.com/media/b5Cj0cAsg3buE/giphy.gif?cid=ecf05e473tg89sl05k2ed0ucin8ggjr99sor2jjt3sfv3hty&rid=giphy.gif&ct=g\" />",
									"    `",
									"}",
									"pm.visualizer.set(template)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "cc130ec4-1eae-41b1-b4bb-17cf61dae282",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{vault:postman_api_key}}"
							}
						],
						"url": {
							"raw": "https://api.getpostman.com/collections/29142931-7b7ce09b-d79b-42c9-9267-2e16b63ec6de",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								"29142931-7b7ce09b-d79b-42c9-9267-2e16b63ec6de"
							]
						},
						"description": "It's time to check your collection.\n\n1. **Get the collection ID:** Select the collection in the sidebar. Then in the context bar to the right, select the `Info` icon and copy the collection `ID`.\n    \n2. **Update the request URL:** Update the `collection_uid` in the request URL with the collection `ID` from the previous step, using any method you prefer.\n    \n3. **Get your Postman API Key**: Create a new [Postman API Key](https://go.postman.co/settings/me/api-keys) and then open _Postman Vault_ (Accessed via the bottom right menu bar). Create a new _Postman Vault_ variable called `postman_api_key` and add your Postman API Key as the Value.  \n    Once the changes are saved, Postman will use the _Postman Vault_ variable to authorize your request as shown under the **Headers** tab of the request.\n    \n4. **Validate your solution**: Hit **Send** and look under the **Test Results** tab of the server response at the bottom to review your test results.\n    \n\nIf you have any failures, review the failed test results or ask for support in the [community forum](https://community.postman.com/). When all of your tests pass, you are done with today's challenge."
					},
					"response": []
				}
			],
			"id": "e2e0309b-e965-4e01-9aad-a009a9427201",
			"description": "Follow the instructions in the request documentation."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "26f8c26c-bf51-4a45-aa07-288a486aa56a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "33490342-ac03-43f7-bf3f-30a72bbbcf32",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}