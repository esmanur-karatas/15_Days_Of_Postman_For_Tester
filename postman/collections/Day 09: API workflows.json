{
	"info": {
		"_postman_id": "46c6dd9c-23e4-479e-b9d2-699a7cafd83d",
		"name": "Day 09: API workflows",
		"description": "## Instructions for Day 9: API workflows\n\n1. **Get the challenge:** Fork the parent collection to your own public workspace.\n2. **Read the documentation:** Select the first folder. Expand the context bar on the right to follow the instructions in the collection documentation.\n3. **Submit your solution:** Select the second folder and follow the instructions in the documentation to validate your solution.\n    \n\n## Learning objectives\n\n- Update requests dynamically such as for pagination\n- Write code to branch and loop API execution\n- Set variables conditionally to keep track of data\n    \n\n## Concepts covered\n\n- [Variables](https://learning.postman.com/docs/sending-requests/variables/)\n- [Scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n- [Writing tests](https://learning.postman.com/docs/writing-scripts/test-scripts/)\n- [Building request workflows](https://learning.postman.com/docs/running-collections/building-workflows/)\n- [Running a collection](https://learning.postman.com/docs/running-collections/intro-to-collection-runs/)\n    \n\n## Additional resources\n\n- [Example](https://www.postman.com/postman/workspace/postman-answers/collection/9215231-b9133e48-73c3-4aa4-b189-e038ee4c5e00?ctx=documentation) in Postman Answers workspace\n- [Sending asynchronous requests](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#sending-requests-from-scripts)\n- [Skip requests](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#skip-request-execution-from-pre-request-scripts)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "29142931-46c6dd9c-23e4-479e-b9d2-699a7cafd83d"
	},
	"item": [
		{
			"name": "API workflows",
			"item": [
				{
					"name": "get starships",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca1a9760-b915-4bec-bc96-e19b2a236986",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(jsonData.count);\r",
									"\r",
									"const nextPageUrl = jsonData.next;\r",
									"const starships = jsonData.results;\r",
									"\r",
									"// Eğer fastestSpeed yoksa varsayılan değer olarak 0 ayarla\r",
									"if (!pm.collectionVariables.has(\"fastestSpeed\")) {\r",
									"    pm.collectionVariables.set(\"fastestSpeed\", 0);\r",
									"}\r",
									"\r",
									"for (const ship of starships) {\r",
									"    const speed = Number(ship.max_atmosphering_speed);\r",
									"    \r",
									"    // NaN olup olmadığını kontrol et\r",
									"    if (!isNaN(speed) && speed > pm.collectionVariables.get(\"fastestSpeed\")) {\r",
									"        pm.collectionVariables.set(\"fastestShip\", ship.name);\r",
									"        pm.collectionVariables.set(\"fastestSpeed\", speed);\r",
									"    }\r",
									"}\r",
									"\r",
									"if (nextPageUrl) {\r",
									"    let currentPageNumber = Number(pm.collectionVariables.get(\"pageNumber\")) || 1;\r",
									"    currentPageNumber++;\r",
									"    pm.collectionVariables.set(\"pageNumber\", currentPageNumber);\r",
									"    pm.execution.setNextRequest(\"get starships\");\r",
									"\r",
									"    console.log(\"Fastest Starship in This Page:\", pm.collectionVariables.get(\"fastestShip\"));\r",
									"    console.log(\"Fastest Speed in This Page:\", pm.collectionVariables.get(\"fastestSpeed\"));\r",
									"    console.log(\"Next Page Available:\", nextPageUrl);\r",
									"} else {\r",
									"    console.log(\"No Next Page Available\");\r",
									"    pm.collectionVariables.set(\"pageNumber\", 1);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dfe6581e-218b-430b-9a9b-054c2bc46284",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c4e85a01-cac1-407e-a039-056c90a09490",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://swapi.dev/api/starships?page={{pageNumber}}",
							"protocol": "https",
							"host": [
								"swapi",
								"dev"
							],
							"path": [
								"api",
								"starships"
							],
							"query": [
								{
									"key": "page",
									"value": "{{pageNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "echo the starship",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1dddb2b8-8d97-4939-a12f-22d7bfd38568",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4dfcad49-46a8-462d-bc2e-59438ece1681",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n  \"name\": \"{{fastestShip}}\",\r\n  \"max_atmosphering_speed\": \"{{fastestSpeed}}\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				}
			],
			"id": "2174a5e5-1b52-41c0-8b38-d625ff024280",
			"description": "Let's use the [The Star Wars API](https://swapi.dev/documentation) in this challenge.\n\n1. **Add a request**: Add a request called `get starships` to the folder `API workflows` with the following details:\n    \n    - `GET` method\n        \n    - `https://swapi.dev/api/starships` request URL  \n        **Send** the request. Then add a log statement under the **Tests** tab to output the number of starships returned in the server response, and **Save**.\n        \n2. **Add a query parameter**: Inspect the response. You might already see there are a few ways to walk through subsequent pages of results in Postman using code. In this example, add the query parameter `page` to the `get starships` request. The value of this collection variable should be `{{pageNumber}}` initialized with a temporary value of the number `1` in the collection variables editor.\n    \n3. **Add Post-response scripts**:\n    \n    - Add a test to verify a `200` status code\n        \n    - Add a script to get the variable `pageNumber` and increment it by 1, only if the next page is available\n        \n    - Save the variable so the incremented value can be used in the subsequent API call\n        \n    \n    **Send** the call to make sure you are getting and setting the `pageNumber` variable as expected. Remember you can use the console for more visibility if your code isn't behaving as expected.\n    \n    - Add another script to set the next request called to be the `get starships` request if the next page is available, so that running this folder in its entirety would page through all the starships in order until there are no more pages available.\n        \n4. **Add another Post-response script**: Still under the **Scripts > Post-response** tab of the `get starships` request, add code to loop through the starships and determine which starship is the fastest.\n    \n    - Initialize two collection variables called `fastestShip` and `fastestSpeed`. The **INITIAL** values can be your first name and `0`.\n        \n    - You must [cast a string to a number](https://www.w3schools.com/js/js_type_conversion.asp) to compare numerical values, like speed.\n        \n    - Keep track of the fastest starship's `name` and `max_atmosphering_speed` as collection variables, to use in the next step.\n        \n5. **Add another request**: Add a second request called `echo the starship` after the first one with the following details:\n    \n    - `POST` method\n        \n    - `https://postman-echo.com/post` request URL\n        \n    - JSON request body formatted like this:\n        \n        ```\n        {\n        \"fastestShip\": \"{{fastestShip}}\",\n        \"fastestSpeed\": \"{{fastestSpeed}}\"\n        }\n        \n         ```\n        \n        Note: if you define and reference variables, Postman handles string substitution in the documentation. So double check you have formatted the JSON request body properly.\n6. **Run the folder**: Once you think you have it, run this folder using the [runner](https://learning.postman.com/docs/running-collections/intro-to-collection-runs/) to make sure there are no errors.\n    \n\nOnce you complete these steps, move on to the next folder in this collection to submit your solution. Follow the instructions in the request documentation."
		},
		{
			"name": "Submit your solution",
			"item": [
				{
					"name": "submit collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26ab1a30-bf76-4989-8b9f-a3d5be3c79bb",
								"exec": [
									"// counter for passed tests",
									"let pass = 0",
									"let totalToPass = 7",
									"",
									"let collection = pm.response.json().collection",
									"",
									"pm.test(\"If you have any failures, review the failed test results or ask for support in the community forum. Remember to save your changes if you update the collection. When all of your tests pass, you are done with today's challenge.\", () => {",
									"    pm.expect(true);",
									"    pass += 1",
									"});",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"    pass += 1",
									"});",
									"",
									"pm.test(\"Correct collection returned\", () => {",
									"    pm.expect(collection.info.name).equals(\"Day 09: API workflows\")",
									"    pass += 1",
									"})",
									"",
									"let folder = collection.item.find(fol => {return fol.name === \"API workflows\"})",
									"",
									"pm.test(\"Requests added correctly\", () => {",
									"    pm.expect(folder.item.length, 'check number of requests').equals(2)",
									"",
									"    let starRequest = folder.item.find(req => { return req.name === \"get starships\"})",
									"    pm.expect(starRequest.name, 'check name').equals(\"get starships\")",
									"    pm.expect(starRequest.request.method, 'check method').equals(\"GET\")",
									"    pm.expect(starRequest.request.url.query.length, 'check params').equals(1)",
									"",
									"    let echoRequest = folder.item.find(req => { return req.name === \"echo the starship\"})",
									"    pm.expect(echoRequest.name, 'check name').equals(\"echo the starship\")",
									"    pm.expect(echoRequest.request.method, 'check method').equals(\"POST\")",
									"",
									"    pass += 1",
									"})",
									"",
									"pm.test(\"Collection variables set\", () => {",
									"",
									"    pm.expect(collection.variable.length).equals(4)",
									"    pm.expect(collection.variable.map(a => a.key), 'check collection variables set').to.contain.oneOf([\"pageNumber\",\"fastestShip\",\"fastestSpeed\"])",
									"",
									"    pass += 1",
									"})",
									"",
									"pm.test(\"Echo body added\", () => {",
									"    let echoRequest = folder.item.find(req => { return req.name === \"echo the starship\"})",
									"",
									"    pm.expect(echoRequest.request.body.mode, 'check mode').equals(\"raw\")",
									"    pm.expect(echoRequest.request.body.options.raw.language, 'check language').equals(\"json\")",
									"    pm.expect(echoRequest.request.body.raw.toString(), 'check ship').contains(\"fastestShip\")",
									"    pm.expect(echoRequest.request.body.raw.toString(), 'check speed').contains(\"fastestSpeed\")",
									"",
									"    pass += 1",
									"})",
									"",
									"pm.test(\"Starships test added\", () => {",
									"    let starRequest = folder.item.find(req => { return req.name === \"get starships\"})",
									"    let event = starRequest.event.find(e => {return e.listen === \"test\"})",
									"",
									"    pm.expect(event.script.exec.toString(), 'check parse object').contains(\"pm.response.json\")",
									"",
									"    pm.expect(event.script.exec.toString(), 'check log').contains(\"console.log\")",
									"    pass += 1",
									"})",
									"",
									"// visualization for test results",
									"let template",
									"if (pass == totalToPass) {",
									"    template = `🍪 passing!",
									"        <br />",
									"        <img src=\"https://media0.giphy.com/media/l2JhtCMwgCLcRXmgg/giphy.gif?cid=ecf05e47lg5h7qayt9xr5skf06lh31kz2ozhysrypm4htinx&rid=giphy.gif&ct=g\" />",
									"    `",
									"} else {",
									"    template = `🙅 please try again",
									"        <br />",
									"        <img src=\"https://media3.giphy.com/media/UohTsyhfrsPFm/giphy.gif?cid=ecf05e47mv96rgygl6w4fenzomwqqeh17p5pvcsgenuyxsbo&rid=giphy.gif&ct=g\" />",
									"    `",
									"}",
									"pm.visualizer.set(template)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0b4a1997-d243-44ae-985e-a080d5e6ac5c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{vault:postman_api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.getpostman.com/collections/29142931-3eb49bdb-6e2b-4788-99fc-2c17964c7d58",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								"29142931-3eb49bdb-6e2b-4788-99fc-2c17964c7d58"
							]
						},
						"description": "It's time to check your collection.\n\n1. **Get the collection ID:** Select the collection in the sidebar. Then in the context bar to the right, select the `Info` icon and copy the collection `ID`.\n    \n2. **Update the request URL:** Update the `collection_uid` in the request URL with the collection `ID` from the previous step, using any method you prefer.\n    \n3. **Get your Postman API Key**: Create a new [Postman API Key](https://go.postman.co/settings/me/api-keys) and then open _Postman Vault_ (Accessed via the bottom right menu bar). Create a new _Postman Vault_ variable called `postman_api_key` and add your Postman API Key as the Value.  \n    Once the changes are saved, Postman will use the _Postman Vault_ variable to authorize your request as shown under the **Headers** tab of the request.\n    \n4. **Validate your solution**: Hit **Send** and look under the **Test Results** tab of the server response at the bottom to review your test results.\n    \n\nIf you have any failures, review the failed test results or ask for support in the [community forum](https://community.postman.com/). When all of your tests pass, you are done with today's challenge."
					},
					"response": []
				}
			],
			"id": "e06dd191-3967-4bea-b984-31d2c13a2463",
			"description": "Follow the instructions in the request documentation."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9e0f5635-dd39-451a-a0ae-15c137795d8f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b713bf70-a3a5-45af-9630-a0d6df9fbba0",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "e1f76d20-72d4-48ad-a7e4-5a76be8445e1",
			"key": "pageNumber",
			"value": "1\n",
			"type": "string"
		},
		{
			"id": "20b0e9d6-fc11-4c5d-890e-636034df0c04",
			"key": "fastestShip",
			"value": "esmanur",
			"type": "string"
		},
		{
			"id": "69fc7ac1-46d1-4b0a-9d93-de40e731e122",
			"key": "fastestSpeed",
			"value": "0",
			"type": "string"
		},
		{
			"id": "225ba633-c630-4c7c-9a19-91e3acc1df50",
			"key": "collection_uid",
			"value": "29142931-3eb49bdb-6e2b-4788-99fc-2c17964c7d58",
			"type": "default"
		}
	]
}